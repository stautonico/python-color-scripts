#!/usr/bin/env python3
from __future__ import print_function

import argparse
import base64
import os
import sys
import zlib
from json import loads, dumps
from random import choice
from shutil import rmtree, which
from pathlib import Path
import requests

CONFIG_DIR = os.path.join(os.path.expanduser("~"), ".config", "python-colorscript")
ART_CONFIG = os.path.join(CONFIG_DIR, "art.json")
EXECUTABLE_PATH = Path(__file__).resolve()
ZSH_AUTOCOMPLETE = os.path.join("/", "usr", "share", "zsh", "functions", "Completion", "Unix", "_python-colorscript")
ZSH_AUTOCOMPLETE_TEMPLATE = os.path.join(CONFIG_DIR, "._python-colorscript")

# TODO: Create a non-interactive --add-art flag
# TODO: Add the ability to use a custom config location
# TODO: Add debug mode

__VERSION__ = "2.1.0"


# This portion of the script belongs to the user "kui" (https://github.com/kui) on github
# This project wouldn't be possible without their amazing tool: "ansi_pixels"
# This script is a modified version of their tool, but recoded for python3 and merged
# with this script so it can all fit in one script for simple distribution
# Thanks kui, you're awesome!
# Original source: https://github.com/kui/ansi_pixels

# START KUI'S CODE

# Renamed main to "draw_ansi"
def draw_ansi(b64, left_padding=0, top_padding=0):
    p = convert(b64)
    for x in range(top_padding):
        print()
    for row in p:
        sys.stdout.write(" " * left_padding)
        for code in row:
            sys.stdout.write('%s  ' % ansi_color(code))
        print(ansi_color(None))


def convert(b64):
    zipped = base64.urlsafe_b64decode(str(b64))
    json_str = zlib.decompress(zipped)
    j = loads(json_str)
    if type(j) is dict:  # Changed this (python2 type checking was different)
        return j['pixels']
    elif type(j) is list:  # Changed this (python2 type checking was different)
        return j
    else:
        sys.exit('Invalid JSON: %s' % type(j))


def ansi_color(code):
    if code == None:
        return '\033[0m'
    else:
        return '\033[48;5;%dm' % code


# END KUI'S CODE


def is_outdated(latest, current):
    latest = tuple([int(x) for x in latest.split(".")])
    current = tuple([int(x) for x in current.split(".")])

    return latest > current


def validate_art_url(url):
    if not url.startswith("https://kui.github.io/ansi_pixels/#"):
        return False
    else:
        return url.replace("https://kui.github.io/ansi_pixels/#", "")


def save_config(data):
    with open(ART_CONFIG, "w") as f:
        f.write(dumps(data))


def update_zsh_autocomplete(data):
    if not os.path.exists(ZSH_AUTOCOMPLETE):
        return

    try:
        print(ZSH_AUTOCOMPLETE_TEMPLATE)
        with open(ZSH_AUTOCOMPLETE_TEMPLATE, "r") as f:
            template = f.read()
    except Exception:
        print("Failed to read zsh autocomplete template")
        return

    try:
        with open(ZSH_AUTOCOMPLETE, "w") as f:
            f.write(template.replace("<ARTWORKS>", " ".join(data.keys())))
    except Exception:
        print("Failed to write zsh autocomplete")
        admin_command = "sudo" if which("sudo") is not None else "doas" if which("doas") is not None else None
        if not admin_command:
            print("Can't retry, sudo or doas is not installed (or not found)")
            return
        # Make a temp file to write to
        temp_filename = os.path.join(CONFIG_DIR, "temp_zsh_autocomplete")
        with open(temp_filename, "w") as f:
            f.write(template.replace("<ARTWORKS>", " ".join(data.keys())))
        print("Trying again with {}...".format(admin_command))
        result = os.system("{} cp {} {}".format(admin_command, temp_filename, ZSH_AUTOCOMPLETE))
        # Remove the temp file
        os.remove(temp_filename)
        if result != 0:
            print("Failed to copy zsh autocomplete")
            return
        return

if __name__ == '__main__':
    artjson_location = "./art.json" if os.getenv(
        "PYTHONCOLORSCRIPTDEBUG") == "true" else ART_CONFIG

    if not os.path.exists(artjson_location):
        print("Could not find art.json config file. Please run the installer.")
        sys.exit(1)

    with open(artjson_location, "r") as f:
        try:
            data = loads(f.read())
        except Exception:
            print("Config is invalid (JSON syntax error)")
            exit(1)

    parser = argparse.ArgumentParser(description="Draw some ASCII art!")
    parser.add_argument("--16", dest="sixteen", action="store_true", help="Draw in 16 color mode")
    parser.add_argument("--256", dest="twofiftysix", action="store_true", help="Draw in 256 color mode")
    parser.add_argument('--left-padding', "-l", dest="left_padding", type=int, required=False,
                        help='Amount of space to add to the left side of the art', default=0)
    parser.add_argument('--top-padding', "-t", dest="top_padding", type=int, required=False,
                        help='Amount of space to add to the top of the art', default=0)
    parser.add_argument("--art", type=str, required=False, help="Draw a specific piece of art. View all using --list")
    parser.add_argument("--list", action="store_true", required=False,
                        help="List the names of all available art pieces")
    parser.add_argument("--random-color-mode", "-r", action="store_true", dest="random_color_mode", required=False,
                        help="Use a random color mode")
    parser.add_argument("--not-sus", action="store_true", dest="notsus", required=False,
                        help="Guarantees you won't be the imposter")
    parser.add_argument("--ignore-distro", "-i", action="store_true", dest="ignoredistro", required=False,
                        help="Show distro specific artworks on all distros")
    parser.add_argument("--blacklist", "-b",
                        help="Remove specific artworks from random pool. Note: Multiple items need to be surrounded by quotes")
    parser.add_argument("--add-art", action="store_true", dest="addart", required=False,
                        help="Interactively add new art")
    parser.add_argument("--version", "-V", action="store_true", required=False, help="Show version information")
    parser.add_argument("--update", action="store_true", required=False, help="Try to update to the latest version")
    parser.add_argument("--uninstall", action="store_true", required=False,
                        help="Uninstall the script from your system")

    args = parser.parse_args()

    if args.version:
        print("python-colorscript {}".format(__VERSION__))
        exit()

    if args.update:
        if os.getuid() != 0:
            print("Only root has the permissions to update the required files, please run with sudo")
            exit()
        else:
            response = requests.get("https://api.github.com/repos/stautonico/python-color-scripts/releases/latest")

            latest_version = response.json()["tag_name"]

            old = is_outdated(latest_version, __VERSION__)

            if old:
                print("An update is available! {} -> {}".format(__VERSION__, latest_version))
                # TODO: Change this with the proper update script
                os.system(
                    "wget -qO - https://raw.githubusercontent.com/stautonico/python-color-scripts/main/install.sh | sudo bash")
            else:
                print("Your software is up to date! ({})".format(__VERSION__))
            exit()

    if args.uninstall:
        if os.path.exists(EXECUTABLE_PATH):
            try:
                os.remove(EXECUTABLE_PATH)
            except Exception:
                print("Failed to remove {}".format(EXECUTABLE_PATH))
                exit(1)

        if os.path.exists(CONFIG_DIR):
            try:
                rmtree(CONFIG_DIR)
            except Exception:
                print("Failed to remove {}".format(CONFIG_DIR))
                exit(1)

        if os.path.exists(ZSH_AUTOCOMPLETE):
            try:
                os.remove(ZSH_AUTOCOMPLETE)
            except PermissionError:
                # Check if we should use sudo or doas
                admin_command = "sudo" if which("sudo") is not None else "doas" if which("doas") is not None else None

                if admin_command is None:
                    print("Failed to find sudo or doas, please install one of these two or manually remove {}".format(
                        ZSH_AUTOCOMPLETE))
                    exit(1)
                else:
                    print("Failed to remove, zsh auto-complete file, trying with {}...".format(admin_command))
                    result = os.system("{} rm {}".format(admin_command, ZSH_AUTOCOMPLETE))
                    if result != 0:
                        print("Failed to remove zsh auto-complete, continuing...")

        print("Thanks for using python-colorscript!")
        exit()

    if args.addart:
        print("To add new art, please visit https://kui.github.io/ansi_pixels and create a new art piece.")
        print("Once you have created the art piece, copy the URL from the browser bar and paste it here")
        print("You can create up to three piece of art, one using each color mode (8, 16, and 256)")
        print("You may use the same link for each color mode if you want to use the same colors for each mode")
        while True:
            name = input("Name of the art piece: ")
            if name == "":
                print("Name cannot be empty!")
                continue
            if name in data.keys():
                print("Name already exists!")
                continue

            name = name.lower()

            # Valid name
            break

        base64_8, base64_16, base64_256 = None, None, None
        while True:
            base64_8 = validate_art_url(input("URL of the art piece (8 color mode): "))
            if base64_8 is not False:
                break
            else:
                print("Invalid URL, please try again")

        while True:
            base64_16 = validate_art_url(input("URL of the art piece (16 color mode): "))
            if base64_16 is not False:
                break
            else:
                print("Invalid URL, please try again")

        while True:
            base64_256 = validate_art_url(input("URL of the art piece (256 color mode): "))
            if base64_256 is not False:
                break
            else:
                print("Invalid URL, please try again")

        data[name] = {
            "8": base64_8,
            "16": base64_16,
            "256": base64_256
        }

        save_config(data)
        update_zsh_autocomplete(data)
        print("Art piece added!")
        exit()

    if args.list:
        print("Available art pieces:")
        art_names = list(data.keys())
        art_names.sort()
        for x in art_names:
            print(x)
        exit()

    if args.art:
        art = args.art.lower()
    else:
        choices = list(data.keys())

        if not args.ignoredistro:
            try:
                with open("/etc/lsb-release", "r") as f:
                    distro_file = f.read().replace("\n", "=")
                    split_distro_file = distro_file.split("=")
                    distro = split_distro_file[split_distro_file.index("DISTRIB_ID") + 1]
            except FileNotFoundError:
                try:
                    with open("/etc/os-release", "r") as f:
                        distro_file = f.read().replace("\n", "=")
                        split_distro_file = distro_file.split("=")
                        distro = split_distro_file[split_distro_file.index("ID") + 1]
                except FileNotFoundError:
                    distro = "Generic"

            # Remove distro specific art
            if distro.lower() != "arch":
                choices.remove("archbtw")

            if distro.lower() != "debian":
                choices.remove("debian")

            if distro.lower() not in ["manjaro", "manjarolinux"]:
                choices.remove("manjaro")

        if args.notsus:
            choices.remove("sus")

        if args.blacklist:
            blacklist = args.blacklist.split(" ")
            for item in blacklist:
                try:
                    choices.remove(item)
                except ValueError:
                    # Invalid art, just ignore and continue
                    pass

        art = choice(choices)

    if args.random_color_mode:
        colormode = choice(["8", "16", "256"])
    else:
        colormode = "16" if args.sixteen else "256" if args.twofiftysix else "8"

    if art in data:
        base64_color_modes = data[art]
        if colormode in base64_color_modes:
            b64 = base64_color_modes[colormode]
        else:
            print(
                "No " + colormode + " color artwork exists for '" + art + "'. You can add one to 'art.json' or try a different using a color mode")
            exit(1)
    else:
        print("'" + art + "'" + " isn't a valid artwork. Use '--list' to get a list of all valid artworks")
        exit(1)

    draw_ansi(b64, args.left_padding, args.top_padding)
