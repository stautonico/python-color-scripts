#!/usr/bin/env python3
from __future__ import print_function

import argparse
import base64
import os
import sys
import zlib
from json import loads
from random import choice
from shutil import rmtree
from subprocess import DEVNULL, STDOUT, check_call

import requests

__VERSION__ = "1.0.3"


# This portion of the script belongs to the user "kui" (https://github.com/kui) on github
# This project wouldn't be possible without their amazing tool: "ansi_pixels"
# This script is a modified version of their tool, but recoded for python3 and merged
# with this script so it can all fit in one script for simple distribution
# Thanks kui, you're awesome!
# Original source: https://github.com/kui/ansi_pixels

# START KUI'S CODE

# Renamed main to "draw_ansi"
def draw_ansi(b64, left_padding=0, top_padding=0):
    p = convert(b64)
    for x in range(top_padding):
        print()
    for row in p:
        sys.stdout.write(" " * left_padding)
        for code in row:
            sys.stdout.write('%s  ' % ansi_color(code))
        print(ansi_color(None))


def convert(b64):
    zipped = base64.urlsafe_b64decode(str(b64))
    json_str = zlib.decompress(zipped)
    j = loads(json_str)
    if type(j) is dict:  # Changed this (python2 type checking was different)
        return j['pixels']
    elif type(j) is list:  # Changed this (python2 type checking was different)
        return j
    else:
        sys.exit('Invalid JSON: %s' % type(j))


def ansi_color(code):
    if code == None:
        return '\033[0m'
    else:
        return '\033[48;5;%dm' % code


# END KUI'S CODE


def is_outdated(latest, current):
    latest = tuple([int(x) for x in latest.split(".")])
    current = tuple([int(x) for x in current.split(".")])

    return latest > current


if __name__ == '__main__':
    artjson_location = "art.json" if os.getenv(
        "PYTHONCOLORSCRIPTDEBUG") == "true" else "/etc/python-colorscript/art.json"
    with open(artjson_location, "r") as f:
        data = loads(f.read())

    parser = argparse.ArgumentParser(description="Draw some ASCII art!")
    parser.add_argument("--16", dest="sixteen", action="store_true", help="Draw in 16 colors mode")
    parser.add_argument("--256", dest="twofiftysix", action="store_true", help="Draw in 256 colors mode")
    parser.add_argument('--left-padding', "-l", dest="left_padding", type=int, required=False,
                        help='Amount of space to add to the left side of the art', default=0)
    parser.add_argument('--top-padding', "-t", dest="top_padding", type=int, required=False,
                        help='Amount of space to add to the top of the art', default=0)
    parser.add_argument("--art", type=str, required=False, help="Draw a specific piece of art. View all using --list")
    parser.add_argument("--list", action="store_true", required=False,
                        help="List the names of all available art pieces")
    parser.add_argument("--random-color-mode", "-r", action="store_true", dest="random_color_mode", required=False,
                        help="Use a random color mode")
    parser.add_argument("--not-sus", action="store_true", dest="notsus", required=False,
                        help="Guarantees you won't be the imposter")
    parser.add_argument("--ignore-distro", "-i", action="store_true", dest="ignoredistro", required=False,
                        help="Show distro specific artworks on all distros")
    parser.add_argument("--blacklist", "-b",
                        help="Remove specific artworks from random pool. Note: Multiple items need to be surrounded by quotes")
    parser.add_argument("--version", "-V", action="store_true", required=False, help="Show version information")
    parser.add_argument("--update", action="store_true", required=False, help="Try to update to the latest version")
    parser.add_argument("--uninstall", action="store_true", required=False,
                        help="Uninstall the script from your system")

    args = parser.parse_args()

    if args.version:
        print("python-colorscript {}".format(__VERSION__))
        exit()

    if args.update:
        if os.getuid() != 0:
            print("Only root has the permissions to update the required files, please run with sudo")
            exit()
        else:
            response = requests.get("https://api.github.com/repos/stautonico/python-color-scripts/releases/latest")

            latest_version = response.json()["tag_name"]

            old = is_outdated(latest_version, __VERSION__)

            if old:
                print("An update is available! {} -> {}".format(__VERSION__, latest_version))
                print("Downloading new version...")
                check_call(
                    ["wget", "{}".format(response.json()['tarball_url']), "-O", "/tmp/python-colorscript.tar.gz"],
                    stdout=DEVNULL, stderr=STDOUT)
                print("Extracting...")
                check_call(["tar", "-xzvf", "/tmp/python-colorscript.tar.gz", "-C", "/tmp"], stdout=DEVNULL,
                           stderr=STDOUT)
                # Find the name of the new file
                new_filenames = [file for file in os.listdir("/tmp/") if
                                 file.startswith("stautonico-python-color-scripts")]
                if len(new_filenames) != 1:
                    print("Something went wrong when trying to update!")
                    exit(1)
                else:
                    # Copy the script and the art.json file
                    print("Installing..")
                    check_call(
                        ["cp", "/tmp/{}/python-colorscript".format(new_filenames[0]), "/usr/bin/python-colorscript"],
                        stdout=DEVNULL, stderr=STDOUT)
                    check_call(["cp", "/tmp/{}/art.json".format(new_filenames[0]), "/etc/python-colorscript/art.json"],
                               stdout=DEVNULL, stderr=STDOUT)

                    print("Successfully updated to version {}!".format(latest_version))
            else:
                print("Your software is up to date! ({})".format(__VERSION__))
            exit()

    if args.uninstall:
        if os.getuid() != 0:
            print("Only root has the permissions to delete the required files, please run with sudo")
            exit()
        else:
            rmtree("/etc/python-colorscript")
            os.remove("/usr/bin/python-colorscript")
            print("Thanks for using python-colorscript!")
            exit()

    if args.list:
        print("Available art pieces:")
        for x in data.keys():
            print(x)
        exit()

    if args.art:
        art = args.art.lower()
    else:
        choices = list(data.keys())

        if not args.ignoredistro:
            try:
                with open("/etc/lsb-release", "r") as f:
                    distro_file = f.read().replace("\n", "=")
                    split_distro_file = distro_file.split("=")
                    distro = split_distro_file[split_distro_file.index("DISTRIB_ID") + 1]
            except FileNotFoundError:
                try:
                    with open("/etc/os-release", "r") as f:
                        distro_file = f.read().replace("\n", "=")
                        split_distro_file = distro_file.split("=")
                        distro = split_distro_file[split_distro_file.index("ID") + 1]
                except FileNotFoundError:
                    distro = "Generic"

            if distro.lower() != "arch":
                choices.remove("archbtw")

        if args.notsus:
            choices.remove("sus")

        if args.blacklist:
            blacklist = args.blacklist.split(" ")
            for item in blacklist:
                try:
                    choices.remove(item)
                except ValueError:
                    # Invalid art, just ignore and continue
                    pass

        art = choice(choices)

    if args.random_color_mode:
        colormode = choice(["8", "16", "256"])
    else:
        colormode = "16" if args.sixteen else "256" if args.twofiftysix else "8"

    if art in data:
        base64_color_modes = data[art]
        if colormode in base64_color_modes:
            b64 = base64_color_modes[colormode]
        else:
            print("No " + colormode + " color artwork exists for '" + art + "'. You can add one to 'art.json' or try a different using a color mode")
            exit(1)
    else:
        print("'" + art + "'" + " isn't a valid artwork. Use '--list' to get a list of all valid artworks")
        exit(1)

    draw_ansi(b64, args.left_padding, args.top_padding)
